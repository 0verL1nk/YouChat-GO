// Code generated by hertz generator, Customize by suyiiyii at https://github.com/suyiiyii/cwgo-template/tree/hertz

package main

import (
	"context"
	"core/biz/dal"
	"core/biz/dal/mysql"
	"core/biz/dal/query"
	"core/biz/logger"
	"core/biz/router"
	mq_consumer "core/biz/service/mq/consumer"
	"core/biz/socket"
	"core/conf"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	"github.com/hertz-contrib/pprof"
)

func main() {
	// use `go run cmd/gorm/main.go` to migrate the database
	dal.Init()
	// use `go run cmd/gorm_gen/main.go` to generate the code
	query.SetDefault(mysql.DB)
	// 初始化公共群组
	mysql.CreatePublicGroup(context.Background())
	address := conf.GetConf().Hertz.Address
	hlog.Info("address:port ", address)
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})
	router.GeneratedRegister(h)
	// 启动消息队列
	go mq_consumer.StartConsumer()
	go socket.SocketServer.Start()

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// log
	// logger := hertzlogrus.NewLogger()
	// hlog.SetLogger(logger)
	// hlog.SetLevel(conf.LogLevel())
	// hlog.SetOutput(os.Stdout)
	logger.ImplyZapLogger()
	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

}

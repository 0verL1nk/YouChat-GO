// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	ChatMessage  *chatMessage
	Conversation *conversation
	File         *file
	Group        *group
	GroupMember  *groupMember
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ChatMessage = &Q.ChatMessage
	Conversation = &Q.Conversation
	File = &Q.File
	Group = &Q.Group
	GroupMember = &Q.GroupMember
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		ChatMessage:  newChatMessage(db, opts...),
		Conversation: newConversation(db, opts...),
		File:         newFile(db, opts...),
		Group:        newGroup(db, opts...),
		GroupMember:  newGroupMember(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ChatMessage  chatMessage
	Conversation conversation
	File         file
	Group        group
	GroupMember  groupMember
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		ChatMessage:  q.ChatMessage.clone(db),
		Conversation: q.Conversation.clone(db),
		File:         q.File.clone(db),
		Group:        q.Group.clone(db),
		GroupMember:  q.GroupMember.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		ChatMessage:  q.ChatMessage.replaceDB(db),
		Conversation: q.Conversation.replaceDB(db),
		File:         q.File.replaceDB(db),
		Group:        q.Group.replaceDB(db),
		GroupMember:  q.GroupMember.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	ChatMessage  IChatMessageDo
	Conversation IConversationDo
	File         IFileDo
	Group        IGroupDo
	GroupMember  IGroupMemberDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ChatMessage:  q.ChatMessage.WithContext(ctx),
		Conversation: q.Conversation.WithContext(ctx),
		File:         q.File.WithContext(ctx),
		Group:        q.Group.WithContext(ctx),
		GroupMember:  q.GroupMember.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
